
// 1. 设置内容
let content = `分镜图 1
- 场景描述 "胖橘猫"戴着一顶小帽子，斜躺在充满鲜花的郁金香花丛中。阳光照在它慵懒的表情上，微风吹过，花朵轻轻摆动。
- "胖橘猫"的衣着 "胖橘猫"戴着一顶草编帽子，身上没穿特别的衣物，露出它那蓬松的橘色毛。

分镜图 2
- 场景描述 突然，一扇由金色光线组成，边缘泛着柔美光泽的神秘光之门在空中打开，光芒从天边涌来，逐渐变亮。
- "胖橘猫"的反应 "胖橘猫"停止了晒太阳，惊讶地坐了起来，两耳竖立，尾巴翘起，眼睛盯着那扇神秘的光门。

分镜图 3
- 场景描述 从光之门中，缓缓降落一只古朴而神秘的银色盒子，表面雕有细密的凯尔特花纹，盒子周围环绕着淡淡的蓝色光晕。
- "胖橘猫"的衣着 此时"胖橘猫"仍是无衣，但它的身姿更加专注，趴姿准备，似乎随时准备迎接盒子的降临。

分镜图 4
- 场景描述 "胖橘猫"用前爪触碰宝盒，宝盒顶部突然弹开，释放出炫目的光芒，整个后院都被光芒照亮，形成美丽的星光效果。
- "胖橘猫"的动作 "胖橘猫"表情惊异，眼睛睁大，显得好奇又有些慌张。

分镜图 5
场景描述: "胖橘猫"被带入了一个令人叹为观止的奇幻森林，这里的空气闪烁着微妙的光芒，巨大而高耸的树木构成了一片覆盖天空的浓密林冠，脚下是一条由石块铺成的古老小径。萤火虫在空气中飘动，照亮了通向森林深处的道路。
"胖橘猫"的衣着: "胖橘猫"穿着一身正式的中世纪风格的骑士铠甲，胸甲上刻有橘猫家族徽记，它头戴一个适合其体型的壮观骑士头盔，腰间佩戴着一把精致的短剑，尽显英勇气概。

分镜图 6
- 场景描述 "胖橘猫"骑士穿行在林间小道上，遇到了一群奇特的生物，它们看起来像是由树叶和花瓣组成，身体散发出柔和的光芒。
- "胖橘猫"的衣着 依旧穿着英勇的铠甲，但此时"胖橘猫"骑士的眼神充满好奇，一手放在剑柄上，准备挑战或是与这些生物交流。

分镜图 7
- 场景描述 "胖橘猫"骑士挥剑斩断了一束从地面生长出的带刺藤蔓，保护着身后的精灵。精灵们看上去非常感激，其中一位手持魔法棒的精灵向"胖橘猫"点点头，表示感谢。
- "胖橘猫"的动作 专注而镇定地挥舞自己的剑，姿态英勇，周身透露出一股不容小觑的气场。

分镜图 8
- 场景描述 "胖橘猫"骑士正站在一片开阔的草地上，细雨中他与一位独眼巨人对峙，巨人手中执着一把巨大的木棍，蓝色闪电在其一只眼周围闪烁。
- "胖橘猫"的衣着 "胖橘猫"骑士的铠甲微微湿润，雨水沿着盔甲滑落，但在雨中更显坚毅，身体轻微下蹲，随时准备迎接挑战。

分镜图 9
- 场景描述 在一场史诗般的战斗之后，"胖橘猫"骑士站在荒废的废墟之中，头顶的光环映射出他勇敢的壮举。他伫立在破碎的石柱旁，手中举起照亮四周黑暗的魔法剑，体态显得庄严而威武。
- "胖橘猫"的状态 一副战后疲惫但胜利的样子，骑士盔甲上留有战斗的划痕，但其表情平静且坚定。

分镜图 10
- 场景描述 "胖橘猫"骑士在一片由高大多彩晶体构成的洞穴中，发现了控制整个奇幻世界的魔法源泉。中心的水晶散发出耀眼的光辉，它们围成一个圆形，静静地等待"胖橘猫"的接近。
- "胖橘猫"的动作 抬起右爪，轻轻触摸中央水晶，脸上流露出解谜成功的喜悦和轻松。


分镜图 11
- 场景描述 在洞穴中心，"胖橘猫"仔细地研究着一个由古老符文环绕的巨大水晶球，这个球中似乎包含着整个世界的秩序与能量。
- "胖橘猫"的动作 其身穿的铠甲在水晶的光辉中反射，右爪轻触水晶球，表情专注，尾巴轻微摇动，展现出对未知领域的好奇心和敬畏之情。

分镜图 12
- 场景描述 一束亮光从洞穴的顶部直射下来，"胖橘猫"被选为森林守护者，它围绕在光环之中，似乎获得了超乎想象的力量。
- "胖橘猫"的衣着 "胖橘猫"仍穿着骑士铠甲，但此刻它头顶的头盔上多了一圈闪光的金色光环，周围环境显得庄严肃穆。

分镜图 13
- 场景描述 "胖橘猫"与邪恶的阴影猫对立，阴影猫巨大、眼眸发红，其身后是一支由暗黑生物组成的军团，整个氛围充满对抗和紧张。
- "胖橘猫"的态度 固守立场，四肢站稳在地，腰间的剑闪着斗志的光芒，猫眸中显露出无畏与决心。

分镜图 14
- 场景描述 在一片混战之中，"胖橘猫"挥舞着剑光，保护着精灵与其他小动物，确保它们安全。周围是争斗中的暗影生物和萤光生物的激烈战斗。
- "胖橘猫"的动作 挥剑进行优雅而敏捷的格斗，同时用巧妙的动作避开了一个又一个攻击，样子勇猛且王者。

分镜图 15
- 场景描述 "胖橘猫"站在草地中央，用尽全力将剑插回地面。剑身突然爆发出一股强大的光芒，形成了一道保护屏障，阻挡了邪恶的进攻，并为盟友提供了避难所。
- "胖橘猫"的表现 尽管明显疲惫，但"胖橘猫"的眼神仍旧坚定不移，它的身体在剑的光环中显得威严。


分镜图 16
- 场景描述 在一片宁静的湖畔边，"胖橘猫"面对着水面中映出的自己，湖水平静如镜，反射着夜空中的星辰与月亮。
- "胖橘猫"的体态 它摘下了战斗中的头盔，平静地坐着，似乎在反思战斗的意义和自己的内心。

分镜图 17
- 场景描述 黎明的第一缕阳光透过森林，照在"胖橘猫"与众多森林生物举行的和平庆典上。生物们团结在一起，表达着对"胖橘猫"的感激与尊敬。
- "胖橘猫"的动作 它站在一块大石头上，享受着众生的欢呼和掌声，尾巴轻轻摇摆，眼中满是喜悦。

分镜图 18
- 场景描述 "胖橘猫"与森林中的精灵及其他生物共同守望着远方的地平线，天空中出现了一道美丽的彩虹，预示着和平与希望。
- "胖橘猫"的状态 它立在一片高高的草地上，旁边是一位手持魔杖的精灵。"胖橘猫"身着铠甲，头戴王冠，它的眼神平和且充满智慧。

分镜图 19
- 场景描述 随着"胖橘猫"的任务完成，它坐在宝盒旁边，宝盒缓缓关闭，再次融入天空中的光门之内，光门逐渐消散。
- "胖橘猫"的动作 它的眼神里带着一丝不舍，但同时也有轻松与满足，它用爪子轻触宝盒，送别这个神奇的物品。

分镜图 20
- 场景描述 最终，"胖橘猫"回到了自己温馨的家，它重新躺在后院的草地上，晒着香甜的阳光，就像一切冒险都是一场美妙的梦境。
- "胖橘猫"的衣着 现在它已回到了最初的样子，没有盔甲，只是一个普通的"胖橘猫"，脖子上悬挂着小小的勋章，熟睡中，它的脸上露出了满足的微笑。

`

// 2. 根据 '分镜图图' 标识进行分割
let contentArr = content
  .split("分镜图")
  .map(
    (item) =>
      `请严格根据Prompt要求的内容分析绘制分镜图，分镜图描述中"xxx"描绘的信息为角色，小橘猫是刚出生的小猫咪，需要严格按照角色形象进行绘制，同时需要确保描绘的动物角色都需要拟人化绘制。画面描述：分镜图${item}`
  );
// """"胖橘猫""""的外观描述为：形象应该是圆润、健壮，体现出一种成熟稳重的风范。他的毛色可能会很丰富，主要以温暖的橘色调为主。
contentArr.shift();
console.log(contentArr);

// 根据类名找到元素
let input_dom = document.querySelector(
  ".M6SqVKIgxzkG926qHtuX .semi-input-textarea.semi-input-textarea-autosize"
);

let intervalId = null;
var isStop = false;

const func = async (i = 0, cycle = 0) => {
  // 如果index已经超过数组长度，那么终止递归
  if (i >= contentArr.length) return;
  if (isStop) return;

  // 4.1. 填入内容
  let setValue = Object.getOwnPropertyDescriptor(
    window.HTMLTextAreaElement.prototype,
    "value"
  ).set;

const content = cycle === 0 ? contentArr[i] : contentArr[i].replace('分析绘制分镜图', '重新绘制分镜图')

  setValue.call(input_dom, content);

  let event = new Event("input", { bubbles: true });

  input_dom.dispatchEvent(event);

  console.time("timer");
  // 4.2. 等待2s
  await new Promise((resolve) => setTimeout(resolve, 5000));
  console.timeEnd("timer");

  // 4.3. 点击元素
  document.querySelector('.chat-uikit-chat-input__input-area__send-button .semi-button').click();

  console.time("timer1");

  // 4.4. 等待10s，检查元素是否存在
  await new Promise(async (resolve) => {
    clearInterval(intervalId);
    intervalId = setInterval(() => {
      let isLoading = !document.querySelector('.hheVvrE0VkdtrwVcvARM');
    if (isStop) return;

      console.log("是否加载中: ", isLoading);
      if (isLoading) {
        clearInterval(intervalId);
        resolve();
      }
    }, 1000 * 10);
  });
  console.timeEnd("timer1");
  // 递归调用：根据cycle数，选择是进入下一循环还是进入下个内容
  cycle < 1 ? await func(i, cycle + 1) : await func(i + 1);
};

func();

